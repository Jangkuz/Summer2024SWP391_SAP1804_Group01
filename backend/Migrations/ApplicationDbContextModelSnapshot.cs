// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Diamond", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("diamond_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit")
                        .HasColumnName("availability");

                    b.Property<double>("Carat")
                        .HasColumnType("float")
                        .HasColumnName("carat");

                    b.Property<long>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("certificate_id");

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("clarity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("color");

                    b.Property<string>("Cut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cut");

                    b.Property<string>("Fluorescene")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fluorescene");

                    b.Property<string>("LabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lab_name");

                    b.Property<string>("Polish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("polish");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<long>("ShapeId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_id");

                    b.Property<string>("Symmetry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("symmetry");

                    b.HasKey("Id");

                    b.HasIndex("ShapeId");

                    b.ToTable("diamond");
                });

            modelBuilder.Entity("backend.Models.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("material_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("material");
                });

            modelBuilder.Entity("backend.Models.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("setting_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<long>("SettingStyleId")
                        .HasColumnType("bigint")
                        .HasColumnName("setting_style_id");

                    b.HasKey("Id");

                    b.HasIndex("SettingStyleId");

                    b.ToTable("setting");
                });

            modelBuilder.Entity("backend.Models.SettingStyle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("setting_style_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<long>("SettingTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("setting_type_id");

                    b.HasKey("Id");

                    b.HasIndex("SettingTypeId");

                    b.ToTable("setting_style");
                });

            modelBuilder.Entity("backend.Models.SettingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("setting_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("setting_type");
                });

            modelBuilder.Entity("backend.Models.Shape", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("shape_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("shape");
                });

            modelBuilder.Entity("backend.Models.Variant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("variant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("material_id");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<long>("SettingId")
                        .HasColumnType("bigint")
                        .HasColumnName("setting_id");

                    b.Property<long>("ShapeId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_id");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SettingId");

                    b.HasIndex("ShapeId");

                    b.ToTable("variant");
                });

            modelBuilder.Entity("backend.Models.VariantImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<long>("VariantID")
                        .HasColumnType("bigint")
                        .HasColumnName("variant_id");

                    b.HasKey("Id");

                    b.HasIndex("VariantID");

                    b.ToTable("variant_image");
                });

            modelBuilder.Entity("backend.Models.Diamond", b =>
                {
                    b.HasOne("backend.Models.Shape", "Shape")
                        .WithMany("Diamonds")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("backend.Models.Setting", b =>
                {
                    b.HasOne("backend.Models.SettingStyle", "SettingStyle")
                        .WithMany("Settings")
                        .HasForeignKey("SettingStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SettingStyle");
                });

            modelBuilder.Entity("backend.Models.SettingStyle", b =>
                {
                    b.HasOne("backend.Models.SettingType", "SettingType")
                        .WithMany("SettingStyles")
                        .HasForeignKey("SettingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SettingType");
                });

            modelBuilder.Entity("backend.Models.Variant", b =>
                {
                    b.HasOne("backend.Models.Material", "Material")
                        .WithMany("Variants")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Setting", "Setting")
                        .WithMany("Variants")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Shape", "Shape")
                        .WithMany("Variants")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Setting");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("backend.Models.VariantImage", b =>
                {
                    b.HasOne("backend.Models.Variant", "Variant")
                        .WithMany("VariantImages")
                        .HasForeignKey("VariantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("backend.Models.Material", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("backend.Models.Setting", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("backend.Models.SettingStyle", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("backend.Models.SettingType", b =>
                {
                    b.Navigation("SettingStyles");
                });

            modelBuilder.Entity("backend.Models.Shape", b =>
                {
                    b.Navigation("Diamonds");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("backend.Models.Variant", b =>
                {
                    b.Navigation("VariantImages");
                });
#pragma warning restore 612, 618
        }
    }
}
